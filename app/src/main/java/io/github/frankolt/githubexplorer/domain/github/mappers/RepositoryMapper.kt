package io.github.frankolt.githubexplorer.domain.github.mappers

import io.github.frankolt.githubexplorer.data.http.github.models.RepositoryResponse
import io.github.frankolt.githubexplorer.domain.github.models.Repository

object RepositoryMapper {

    /**
     * Maps the `RepositoryResponse` model to the `Repository` model. If mandatory fields are
     * missing, `NullPointerException` is thrown.
     */
    @Throws(NullPointerException::class)
    fun fromResponse(response: RepositoryResponse): Repository = Repository(
        response.id,
        response.nodeId,
        response.name!!,
        response.fullName!!,
        UserMapper.fromResponse(response.owner!!),
        response.isPrivate,
        response.htmlUrl,
        response.description,
        response.isFork,
        response.url,
        response.archiveUrl,
        response.assigneesUrl,
        response.blobsUrl,
        response.branchesUrl,
        response.collaboratorsUrl,
        response.commentsUrl,
        response.compareUrl,
        response.contentsUrl,
        response.contributorsUrl,
        response.deploymentsUrl,
        response.downloadsUrl,
        response.eventsUrl,
        response.forksUrl,
        response.gitCommitsUrl,
        response.gitRefsUrl,
        response.gitTagsUrl,
        response.gitUrl,
        response.issueCommentUrl,
        response.issueEventsUrl,
        response.issuesUrl,
        response.keysUrl,
        response.labelsUrl,
        response.languagesUrl,
        response.mergesUrl,
        response.milestonesUrl,
        response.pullsUrl,
        response.releasesUrl,
        response.sshUrl,
        response.stargazersUrl,
        response.statusesUrl,
        response.subscribersUrl,
        response.subscriptionUrl,
        response.tagsUrl,
        response.teamsUrl,
        response.treesUrl,
        response.cloneUrl,
        response.mirrorUrl,
        response.hooksUrl,
        response.svnUrl,
        response.createdAt,
        response.updatedAt,
        response.pushedAt,
        response.homepage,
        response.size,
        response.stargazersCount,
        response.watchersCount,
        response.language,
        response.forksCount,
        response.openIssuesCount,
        response.masterBranch,
        response.defaultBranch,
        response.score,
        response.isTemplate,
        response.topics,
        response.hasIssues,
        response.hasProjects,
        response.hasWiki,
        response.hasPages,
        response.hasDownloads,
        response.isArchived,
        response.isDisabled,
        response.visibility,
        response.permissions?.let { RepositoryPermissionsMapper.fromResponse(it) },
        response.allowRebaseMerge,
        response.templateRepository?.let { fromResponse(it) },
        response.tmpCloneToken,
        response.isSquashMergeAllowed,
        response.shouldDeleteBranchOnMerge,
        response.subscribersCount,
        response.networkCount,
        response.license?.let { LicenseMapper.fromResponse(it) },
        response.organization?.let { UserMapper.fromResponse(it) }
    )
}
